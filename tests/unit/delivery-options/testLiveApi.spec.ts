import * as CONFIG from '@/data/keys/configKeys';
import { BPOST, POSTNL } from '@/data/keys/carrierKeys';
import { MYPARCEL, SENDMYPARCEL } from '@/data/keys/platformKeys';
import dayjs from 'dayjs';
import { fakeDeliveryOptionsResponse } from '@Mocks/@myparcel/js-sdk/dist/data/fakeDeliveryOptionsResponse';
import { fetchDeliveryOptions } from '@/delivery-options/data/delivery/fetchDeliveryOptions';
import { getRequestParameters } from '@/delivery-options/data/request/getRequestParameters';
import { mockConfigBus } from '@Tests/unit/delivery-options/mockConfigBus';

const formatDates = ({ date }) => dayjs(date.date).format('dddd, DD-MM-YYYY');

/**
 * This test is made to check whether the delivery options generated by fakeDeliveryOptionsResponse match the real
 *  response from the API.
 *
 * As long as this test passes, the results of all tests using mocked delivery options can be trusted.
 */
describe('test settings on the live API', () => {
  beforeAll(() => {
    // Disable mocks, so the test can use the real API instead of mocked responses.
    jest.clearAllMocks();
  });

  afterAll(() => {
    jest.restoreAllMocks();
  });

  const now = dayjs();
  const weekday = now.format('dddd').toLowerCase();

  test.each`
    platform        | carrier   | allowExtraDelivery | cutoffTime | extraCutoffTime | dropOffDays
    ${MYPARCEL}     | ${POSTNL} | ${true}            | ${'16:00'} | ${'12:00'}      | ${[2, 3, 4, 5, 6]}
    ${MYPARCEL}     | ${POSTNL} | ${false}           | ${'16:00'} | ${'12:00'}      | ${[0, 1, 2, 3, 4, 5]}
    ${SENDMYPARCEL} | ${BPOST}  | ${true}            | ${'16:00'} | ${'12:00'}      | ${[1, 2, 3, 5, 6]}
    ${SENDMYPARCEL} | ${BPOST}  | ${false}           | ${'16:00'} | ${'12:00'}      | ${[1, 3, 4, 6]}
    ${MYPARCEL}     | ${POSTNL} | ${true}            | ${'00:01'} | ${'09:00'}      | ${[0, 1, 2, 3, 4, 5, 6]}
    ${MYPARCEL}     | ${POSTNL} | ${false}           | ${'00:01'} | ${'09:00'}      | ${[1, 2, 3, 4, 5]}
    ${SENDMYPARCEL} | ${BPOST}  | ${true}            | ${'00:01'} | ${'09:00'}      | ${[1, 4, 5]}
    ${SENDMYPARCEL} | ${BPOST}  | ${false}           | ${'00:01'} | ${'09:00'}      | ${[0, 1, 2, 3, 4, 5, 6]}
  `(`test cutoff times for $platform on ${weekday}`, async({
    platform,
    carrier,
    allowExtraDelivery,
    cutoffTime,
    extraCutoffTime,
    dropOffDays,
  }) => {
    expect.assertions(1);
    const DELIVERY_DAYS_WINDOW = 7;
    const mockedConfigBus = mockConfigBus({
      [CONFIG.KEY]: {
        [CONFIG.PLATFORM]: platform,
        [CONFIG.DELIVERY_DAYS_WINDOW]: DELIVERY_DAYS_WINDOW,
        [CONFIG.CUTOFF_TIME]: cutoffTime,
        [CONFIG.DROP_OFF_DAYS]: dropOffDays,
        [CONFIG.CUTOFF_TIME]: cutoffTime,
        [CONFIG.ALLOW_MONDAY_DELIVERY]: allowExtraDelivery,
        [CONFIG.ALLOW_SATURDAY_DELIVERY]: allowExtraDelivery,
        [CONFIG.FRIDAY_CUTOFF_TIME]: extraCutoffTime,
        [CONFIG.SATURDAY_CUTOFF_TIME]: extraCutoffTime,
        [CONFIG.CARRIER_SETTINGS]: {
          [carrier]: {
            [CONFIG.ALLOW_DELIVERY_OPTIONS]: true,
          },
        },
      },
    });

    jest.mock('@/delivery-options/config/configBus', () => ({ configBus: mockedConfigBus }));

    const realResponse = await fetchDeliveryOptions();
    const receivedDeliveryOptions = realResponse.map(formatDates);

    const fakeResponse = fakeDeliveryOptionsResponse(getRequestParameters());
    const calculatedDeliveryOptions = fakeResponse.map(formatDates);

    expect(receivedDeliveryOptions).toEqual(calculatedDeliveryOptions);
  });
});
