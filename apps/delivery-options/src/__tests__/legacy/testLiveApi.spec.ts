/**
 * This test is made to check whether the delivery options generated by fakeDeliveryOptionsResponse match the real
 *  response from the API.
 *
 * As long as this test passes, the results of all tests using mocked delivery options can be trusted.
 */
import {afterAll, beforeAll, describe, expect, test, vi} from 'vitest';
import {format} from 'date-fns';
import {fakeDeliveryOptionsResponse} from '@myparcel-do/shared/testing';
import {
  ALLOW_DELIVERY_OPTIONS,
  ALLOW_MONDAY_DELIVERY,
  ALLOW_SATURDAY_DELIVERY,
  CARRIER_SETTINGS,
  CUTOFF_TIME,
  DROP_OFF_DAYS,
  FRIDAY_CUTOFF_TIME,
  getCarrierConfiguration,
  KEY_CONFIG,
  PLATFORM,
  SATURDAY_CUTOFF_TIME,
} from '@myparcel-do/shared';
import {CarrierName, PlatformName} from '@myparcel/constants';
import {fetchDeliveryOptions} from '../../legacy';

describe.skip('test settings on the live API', () => {
  const formatDates = ({date}) => dayjs(date.date).format('dddd, DD-MM-YYYY');

  beforeAll(() => {
    // Disable mocks, so the test can use the real API instead of mocked responses.
    vi.clearAllMocks();
  });

  afterAll(() => {
    vi.restoreAllMocks();
  });

  const now = new Date();
  const weekday = format(now, 'dddd').toLowerCase();

  test.each`
    platform                     | carrier               | allowExtraDelivery | cutoffTime | extraCutoffTime | dropOffDays
    ${PlatformName.MyParcel}     | ${CarrierName.PostNl} | ${true}            | ${'16:00'} | ${'12:00'}      | ${[2, 3, 4, 5, 6]}
    ${PlatformName.MyParcel}     | ${CarrierName.PostNl} | ${false}           | ${'16:00'} | ${'12:00'}      | ${[0, 1, 2, 3, 4, 5]}
    ${PlatformName.SendMyParcel} | ${CarrierName.Bpost}  | ${true}            | ${'16:00'} | ${'12:00'}      | ${[1, 2, 3, 5, 6]}
    ${PlatformName.SendMyParcel} | ${CarrierName.Bpost}  | ${false}           | ${'16:00'} | ${'12:00'}      | ${[1, 3, 4, 6]}
    ${PlatformName.MyParcel}     | ${CarrierName.PostNl} | ${true}            | ${'00:01'} | ${'09:00'}      | ${[0, 1, 2, 3, 4, 5, 6]}
    ${PlatformName.MyParcel}     | ${CarrierName.PostNl} | ${false}           | ${'00:01'} | ${'09:00'}      | ${[1, 2, 3, 4, 5]}
    ${PlatformName.SendMyParcel} | ${CarrierName.Bpost}  | ${true}            | ${'00:01'} | ${'09:00'}      | ${[1, 4, 5]}
    ${PlatformName.SendMyParcel} | ${CarrierName.Bpost}  | ${false}           | ${'00:01'} | ${'09:00'}      | ${[0, 1, 2, 3, 4, 5, 6]}
  `(
    `test cutoff times for $platform on ${weekday}`,
    async ({platform, carrier, allowExtraDelivery, cutoffTime, extraCutoffTime, dropOffDays}) => {
      expect.assertions(1);
      const DELIVERY_DAYS_WINDOW = 7;
      const mockedConfigBus = mockConfigBus({
        [KEY_CONFIG]: {
          [PLATFORM]: platform,
          [DELIVERY_DAYS_WINDOW]: DELIVERY_DAYS_WINDOW,
          [DROP_OFF_DAYS]: dropOffDays,
          [CUTOFF_TIME]: cutoffTime,
          [ALLOW_MONDAY_DELIVERY]: allowExtraDelivery,
          [ALLOW_SATURDAY_DELIVERY]: allowExtraDelivery,
          [FRIDAY_CUTOFF_TIME]: extraCutoffTime,
          [SATURDAY_CUTOFF_TIME]: extraCutoffTime,
          [CARRIER_SETTINGS]: {
            [carrier]: {
              [ALLOW_DELIVERY_OPTIONS]: true,
            },
          },
        },
      });

      // vi.mock('@/delivery-options/config/configBus', () => ({configBus: mockedConfigBus}));

      const realResponse = await fetchDeliveryOptions(CarrierName.PostNl, PlatformName.MyParcel);
      const receivedDeliveryOptions = realResponse.map(formatDates);

      const fakeResponse = fakeDeliveryOptionsResponse(
        getRequestParameters(getCarrierConfiguration(CarrierName.PostNl, PlatformName.MyParcel)),
      );
      const calculatedDeliveryOptions = fakeResponse.map(formatDates);

      expect(receivedDeliveryOptions).toEqual(calculatedDeliveryOptions);
    },
  );
});
